checks :: ()

*** Failed! Falsifiable (after 1 tests):
() ()

Generalization:
_ _

*** Failed! Falsifiable (after 1 tests):
() ()

Generalization:
_ _

+++ OK, passed 1 tests (exhausted).

+++ OK, passed 1 tests (exhausted).


checks :: Bool

*** Failed! Falsifiable (after 1 tests):
False False

Generalization:
p p

*** Failed! Falsifiable (after 1 tests):
False False

Generalization:
p p

*** Failed! Falsifiable (after 3 tests):
True False

*** Failed! Falsifiable (after 2 tests):
False True


checks :: Int

*** Failed! Falsifiable (after 1 tests):
0 0

Generalization:
x x

Conditional Generalization:
y x  when  x <= y

*** Failed! Falsifiable (after 1 tests):
0 0

Generalization:
x x

Conditional Generalization:
x y  when  x <= y

*** Failed! Falsifiable (after 3 tests):
1 0

Conditional Generalization:
y x  when  x < y

*** Failed! Falsifiable (after 2 tests):
0 1

Conditional Generalization:
x y  when  x < y


checks :: Integer

*** Failed! Falsifiable (after 1 tests):
0 0

Generalization:
x x

Conditional Generalization:
y x  when  x <= y

*** Failed! Falsifiable (after 1 tests):
0 0

Generalization:
x x

Conditional Generalization:
x y  when  x <= y

*** Failed! Falsifiable (after 3 tests):
1 0

Conditional Generalization:
y x  when  x < y

*** Failed! Falsifiable (after 2 tests):
0 1

Conditional Generalization:
x y  when  x < y


checks :: Char

*** Failed! Falsifiable (after 1 tests):
'a' 'a'

Generalization:
c c

Conditional Generalization:
d c  when  c <= d

*** Failed! Falsifiable (after 1 tests):
'a' 'a'

Generalization:
c c

Conditional Generalization:
c d  when  c <= d

*** Failed! Falsifiable (after 2 tests):
'a' ' '

Conditional Generalization:
d c  when  c < d

*** Failed! Falsifiable (after 3 tests):
' ' 'a'

Conditional Generalization:
c d  when  c < d


checks :: Ordering

*** Failed! Falsifiable (after 1 tests):
LT LT

Generalization:
o o

*** Failed! Falsifiable (after 1 tests):
LT LT

Generalization:
o o

*** Failed! Falsifiable (after 4 tests):
EQ LT

*** Failed! Falsifiable (after 2 tests):
LT EQ


checks :: [Integer]

*** Failed! Falsifiable (after 1 tests):
[] []

Generalization:
xs xs

Conditional Generalization:
ys xs  when  xs <= ys

*** Failed! Falsifiable (after 1 tests):
[] []

Generalization:
xs xs

Conditional Generalization:
xs ys  when  xs <= ys

*** Failed! Falsifiable (after 3 tests):
[0] []

Generalization:
(_:_) []

Conditional Generalization:
xs []  when  [] /= xs

*** Failed! Falsifiable (after 2 tests):
[] [0]

Generalization:
[] (_:_)

Conditional Generalization:
[] xs  when  [] /= xs


checks :: ((),Int)

*** Failed! Falsifiable (after 1 tests):
((),0) ((),0)

Generalization:
ux ux

Conditional Generalization:
(_,y) (_,x)  when  x <= y

*** Failed! Falsifiable (after 1 tests):
((),0) ((),0)

Generalization:
ux ux

Conditional Generalization:
(_,x) (_,y)  when  x <= y

*** Failed! Falsifiable (after 3 tests):
((),1) ((),0)

Generalization:
(_,1) (_,0)

Conditional Generalization:
(_,y) (_,x)  when  x < y

*** Failed! Falsifiable (after 2 tests):
((),0) ((),1)

Generalization:
(_,0) (_,1)

Conditional Generalization:
(_,x) (_,y)  when  x < y


checks :: Maybe Int

*** Failed! Falsifiable (after 1 tests):
Nothing Nothing

Generalization:
mx mx

Conditional Generalization:
mx' mx  when  mx <= mx'

*** Failed! Falsifiable (after 1 tests):
Nothing Nothing

Generalization:
mx mx

Conditional Generalization:
mx mx'  when  mx <= mx'

*** Failed! Falsifiable (after 3 tests):
(Just 0) Nothing

Generalization:
(Just _) Nothing

Conditional Generalization:
mx Nothing  when  Nothing /= mx

*** Failed! Falsifiable (after 2 tests):
Nothing (Just 0)

Generalization:
Nothing (Just _)

Conditional Generalization:
Nothing mx  when  Nothing /= mx


checks :: Either Int Char

*** Failed! Falsifiable (after 1 tests):
(Left 0) (Left 0)

Generalization:
exc exc

Conditional Generalization:
exc' exc  when  exc <= exc'

*** Failed! Falsifiable (after 1 tests):
(Left 0) (Left 0)

Generalization:
exc exc

Conditional Generalization:
exc exc'  when  exc <= exc'

*** Failed! Falsifiable (after 3 tests):
(Right 'a') (Left 0)

Generalization:
(Right _) (Left _)

Conditional Generalization:
exc' exc  when  exc < exc'

*** Failed! Falsifiable (after 2 tests):
(Left 0) (Right 'a')

Generalization:
(Left _) (Right _)

Conditional Generalization:
exc exc'  when  exc < exc'


